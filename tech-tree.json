{
  "misc": {
    "start": {
      "dependencies": [],
      "icon": "assets/power.png",
      "display-name": "Start",
      "blurb": "Begin contract for Halo Jenga MVP",
      "links": {
        "What is the Halo Jenga game mode?": "https://www.youtube.com/watch?v=JEHKnc2Y9AM"
      },
      "completed": "2-8-24"
    },

    "map-layout": {
      "dependencies": ["start"],
      "display-name": "Basic Map",
      "blurb": "Build aloating island, destructible jenga tower, spectator box, and spawn locations",
      "completed": "2-13-24",
      "icon": "assets/map.png"
    },
    "assign-teams": {
      "dependencies": ["map-layout"],
      "display-name": "Assign Teams",
      "blurb": "In a loop, randomly pick an 'infected' Player and spawn all Players into the map. Players that die become spectators. Everyone becomes a spectator at the end of the round, with an intermission period. Players can be given team-specific tools on spawn.",
      "completed": "2-16-24",
      "icon": "assets/three-people.png"
    },
    "win-condition": {
      "dependencies": ["assign-teams"],
      "display-name": "Win Condition",
      "blurb": "Winning players names are displayed at end of round. 'Infected' player wins if all other Players die within the time limit. Normal Players win if the 'Infected' player dies or they survive until the end of the time limit.",
      "completed": "2-16-24",
      "icon": "assets/trophy.png"
    },
    "leaderboard": {
      "dependencies": ["win-condition"],
      "display-name": "Leaderboard tracks wins/losses",
      "blurb": "Track players' wins/losses using a ROBLOX default leaderboard",
      "completed": "2-17-24",
      "icon": "assets/leaderboard.jpg"
    },
    "gravity-lift": {
      "dependencies": ["start"],
      "display-name": "Gravity Lift",
      "blurb": "Dropping unanchored parts or models onto a gravity lift gently throws it at an angle",
      "icon": "assets/up-arrow.jpg",
      "completed": "2-15-24"
    },
    "spawn-props": {
      "dependencies": ["start"],
      "display-name": "Spawn Unanchored Props",
      "blurb": "Prop Spawners are boxes that spawn throwable prop models. When the model is destroyed, it respawns after a delay. It also unanchors/welds models upon spawn.",
      "icon": "assets/refresh.jpg",
      "completed": "2-15-24"
    },
    "hammer": {
      "dependencies": ["gravity-lift", "spawn-props", "map-layout"],
      "display-name": "Gravity Hammer",
      "blurb": "Players can fling prop models into gravity lifts and into the jenga tower using a hammer, which creates an explosion that pushes prop models.",
      "completed": "2-28-24",
      "icon": "assets/thor-hammer.jpg"
    },
    "balancing": {
      "dependencies": ["hammer", "leaderboard"],
      "display-name": "Balance The Game",
      "blurb": "Tune physics values to balance game difficulty with reward to maximize fun/engagement",
      "completed": "2-28-24",
      "icon": "assets/seesaw.png"
    },
    "playtest1": {
      "dependencies": ["balancing"],
      "display-name": "The game is fun (Playtest #1)",
      "blurb": "Playtest minimum game concept with smart players, familiar with the original Halo Jenga minigame",
      "completed": "2-28-24",
      "icon": "assets/controller.png"
    },

    "pretty-map": {
      "dependencies": ["playtest1"],
      "display-name": "Make the Map Pretty",
      "blurb": "(and take screenshots for thumbnails)",
      "completed": "2-29-24",
      "icon": "assets/floating-rock.jpg"
    },
    "basic-icon": {
      "dependencies": ["pretty-map"],
      "display-name": "Basic Game Icon",
      "completed": "2-29-24",
      "icon": "assets/halo-jenga-icon.png"
    },
    "spectate-mode": {
      "dependencies": ["playtest1"],
      "display-name": "POV Spectate Mode",
      "blurb": "Lobby players have a UI button to spectate any player still in the match. The spectator's camera tracks the other player's body. The UI includes arrow buttons to toggle between different players. Arrow keys also work. Spectators leave spectate mode when they enter the match. Spectators can also manually exit spectate mode.",
      "completed": "3-1-24",
      "icon": "assets/camera.png"
    },
    "playtest2": {
      "dependencies": ["basic-icon", "spectate-mode"],
      "display-name": "The Game World is Pretty (Playtest #2)",
      "blurb": "Record gameplay footage with pretty map while playtesting with players of varying level of skill. Ask players what is unintuitive about the game?",
      "completed": "3-2-24",
      "icon": "assets/controller.png"
    },
    "roadmap2": {
      "dependencies": ["playtest2"],
      "display-name": "Plan for next playtest",
      "blurb": "Edit the roadmap to account for issues brought up in Playtest #2.",
      "completed": "3-6-24",
      "icon": "assets/blueprint.png"
    },

    "smart-team-assignment": {
      "dependencies": ["roadmap2"],
      "display-name": "Smart Attacker Assignment Queue",
      "blurb": "Assign players to be attacker fairly with a queue, such that each player gets a turn before others get a second turn, while also balancing players leaving/joining the game. AFK players can't be attacker, but don't lose their spot in line. Attackers lose after a minute of being AFK. Players can view the queue, and AFK players are given an 'AFK' tag above their heads and in the queue gui. Admins can arbitrarily assign a player's position in queue -- but all players must always be in the queue only once. One attacker is picked per six players on the tower. AFK Players screen tells them that they are AFK and won't be picked to be attacker."
    },
    "intuitive-gravity-hammer": {
      "dependencies": ["roadmap2"],
      "display-name": "Make Gravity Hammer More Intuitive",
      "blurb": "Gravity Hammer cursor changes to tell the user when it is too far away for an explosion or when the Gravity Hammer is 'reloading'. Gravity Hammer is automatically equipped when players become attackers.",
      "started": "3-12-24"
    },
    "attacker-tutorial": {
      "dependencies": ["buff-gravity-lift", "intuitive-gravity-hammer"],
      "display-name": "Tutorial For New Attackers",
      "blurb": "New players in the attacker role receive a tutorial HUD which instructs them to 1) push props with hammer explosions, 2) push props into the launchers, and 3) push props at different angles to aim. Tutorial tasks automatically end when user completes them. Users can replay the tutorial at any time and it can be skipped. The prop/launcher setup near attacker spawn is designed for the tutorial."
    },
    "objective-guis": {
      "dependencies": ["attacker-tutorial", "reset-props-every-match"],
      "display-name": "Tell The Player What's Going On",
      "blurb": "When the match begins, display the name of the player's team and their objective (survive/destroy the tower leave no survivors) on their screen. Also display the match state by the timer gui. Update the number of survivors under the match timer gui and notify everyone when a player was eliminated. Eliminated players see a gui that says something like 'You were eliminated!'"
    },
    "buff-gravity-lift": {
      "dependencies": ["roadmap2"],
      "display-name": "Buff Gravity Lifts",
      "blurb": "Make it harder for attacker to miss using Gravity Lifts by reducing or cancelling any velocity an object might have at the moment it is pushed into the gravity lift. Design a new test environment that accounts for pushing objects into lifts with the gravity hammer at different angles. Adjust prop spawners on the island to reduce the hassle of aiming props at remaining bits of tower.",
      "started": "3-12-24"
    },
    "red-bull": {
      "dependencies": ["buff-gravity-lift"],
      "display-name": "Red Bull gives Attackers Speed Boost",
      "blurb": "Attackers are given two red bull energy drinks, which they can consume for a temporary speed boost. Red bulls are removed after they're consumed. Red Bulls allow an attacker to cross the entire island in ~3 seconds."
    },
    "reset-props-every-match": {
      "dependencies": ["roadmap2"],
      "display-name": "Respawn All Props At Beginning Of Match + Dedicated Match Loading State",
      "blurb": "All of attacker's props are reset at the beginning of the match (this is mainly for groups of barrels). Adjust prop respawn time such that it takes too long for a prop to respawn for an attacker to camp a single launcher. Create a separate 'loading' match state to ensure the tower and map is fully loaded before players get spawned in. Admins can't restart the match during a loading period.",
      "completed": "3-7-24",
      "icon": "assets/recycle.png"
    },
    "prop-density-controls": {
      "dependencies": ["reset-props-every-match"],
      "display-name": "Prop Density Controls",
      "blurb": "Define functions for a) setting the density and friction of every part in the tower and b) setting the total mass of each specific thrown prop. Tower density & mass per prop are defined as constants in config, but they can be changed (and outputted) via admin command line while playing the game.",
      "started": "3-7-24",
      "completed": "3-11-24",
      "icon": "assets/seesaw.png"
    },
    "crash-sfx": {
      "dependencies": ["prop-density-controls", "objective-guis"],
      "display-name": "Props Make Sound Effects When Crashing Into The Tower",
      "blurb": "When props hit the tower for the first time, they make a sound effect custom to that prop. When players are hit with a prop, they make a sound effect like a scream or a splat. When players are eliminated, a cannon sound (or something similar) fires. Gravity Hammer explosions make a noise and props thrown by a Gravity Lift make a 'whoosh' noise. Victory / defeat music plays at the end of the match, depending on if you won or lost."
    },
    "balancing2": {
      "dependencies": ["crash-sfx"],
      "display-name": "Balance The Game",
      "blurb": "The tower should not fall apart when the match starts. Players should not spawn on the island unless they are an attacker. It should not be frustrating to destroy the tower as an attacker, but they should be forced to move to different launchers and strategize a bit. The new GUIs needs to be obvious but not in the way. SFX should not be too loud."
    },

    "playtest3": {
      "dependencies": ["balancing2"],
      "display-name": "Game is User-Friendly (Playtest #3)",
      "blurb": "Game should be intuitive and fun to people who have never played this game before. Game should be well-balanced."
    },
    "roadmap3": {
      "dependencies": ["playtest3"],
      "display-name": "Plan for first market release",
      "blurb": "Update the roadmap to account for issues & ideas brought up in playtest #3"
    },
    "boombox": {
      "dependencies": ["roadmap3"],
      "display-name": "Boombox Item",
      "blurb": "Players can be given boomboxes (radios) that stick to their back. Players can control their radio by inputting a roblox sound id and clicking 'play' or 'stop'. Players with boomboxes always respawn with them on. The sound plays in 3d space where the boombox is, and is reasonably loud."
    },
    "taunt-animations": {
      "dependencies": ["roadmap3"],
      "display-name": "Load Taunt Emotes into Roblox Emotes Menu",
      "blurb": "Custom taunt animations can be loaded into ROBLOX emotes menu and played by the user every time they spawn."
    },
    "double-jump": {
      "dependencies": ["roadmap3"],
      "display-name": "Double Jump",
      "blurb": "Players with double-jump ability can get one extra jump in the air, which resets when they hit the ground."
    },
    "shop": {
      "dependencies": ["taunt-animations", "boombox", "double-jump"],
      "display-name": "Basic Shop",
      "blurb": "Selling taunts, double-jump, and boombox (separately, as gamepasses). User clicks a button on side of screen to open/close shop. Shop is a scrolling frame with a grid of shop item cards, which display the item name, picture, description, and a purchase button with the price (robux) on it. Users can purchase items, which shows the item as bought. Shop items persist between game sessions & character respawns. The shop gui is transparent so players see if they're in danger."
    },
    "shop-design": {
      "dependencies": ["shop"],
      "display-name": "Shop GUI Design",
      "blurb": "Shop item cards and purchase buttons have an animated glow under the user's cursor. Fonts look sleek. Buttons make satisfying noises on click. The shop is colored minimalistically black & white, with small rounded corners applied judiciously. Shop item pictures are minimalistic and match a cohesive theme."
    },
    "browse-catalog": {
      "dependencies": ["shop"],
      "display-name": "Browse ROBLOX Emotes Catalog In-Game",
      "blurb": "Generate 40% (?) commission by giving users access to the ROBLOX Catalog in-game. Filter catalog search to funny dancing emotes for taunting attackers."
    },
    "sell-attacker-assignments": {
      "dependencies": ["roadmap3"],
      "display-name": "Pay to Be Attacker",
      "blurb": "Users can spend robux to jump to be chosen as attacker next round. If there are multiple paying users, it forms a line. The price is prohibitively expensive to prevent this from happening at an annoying level for unpaying users."
    },
    "playtest4": {
      "dependencies": ["browse-catalog", "shop-design"],
      "display-name": "Game is Monetized (Playtest #4?)",
      "blurb": "Game is monetized."
    }
  }
}
